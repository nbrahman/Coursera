echo = TRUE  # Make code always visible
options(scipen = 1)  # Turn off scientific notations for numbers
# Chunk 2
library(RCurl)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
trainingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile=getURL(trainingURL)
testingFile=getURL(testingURL)
# Chunk 3
trainingData <- read.csv(textConnection(trainingFile), na.strings = c("NA", "#DIV/0!", ""))
testingData  <- read.csv(textConnection(testingFile),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(tainingData$user_name, trainingData$classe))
prop.table(table(trainingData$classe))
# Chunk 4
trainingDataFinal = trainingData[,7:160]
testingDataFinal = testingData[,7:160]
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19621
trainingDataFinal = trainingData[,naData]
testingDataFinal = testingData[,naData]
set.seed(3141592)
summary(trainingDataFinal)
trainingData1 = createDataPartition(y=trainingDataFinal$classe,p=0.6, list=FALSE)
finalTraining = trainingDataFinal[trainingData1,]
finalTesting = trainingDataFinal[-trainingData1,]
summary(finalTraining)
summary(finalTesting)
summary(trainingDataFinal$classe)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
echo = TRUE  # Make code always visible
options(scipen = 1)  # Turn off scientific notations for numbers
# Chunk 2
library(RCurl)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
trainingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile=getURL(trainingURL)
testingFile=getURL(testingURL)
# Chunk 3
trainingData <- read.csv(textConnection(trainingFile), na.strings = c("NA", "#DIV/0!", ""))
testingData  <- read.csv(textConnection(testingFile),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(tainingData$user_name, trainingData$classe))
prop.table(table(trainingData$classe))
# Chunk 4
trainingDataFinal = trainingData[,7:160]
testingDataFinal = testingData[,7:160]
names (trainingDataFinal)
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19621
naData
trainingDataFinal = trainingData[,naData]
testingDataFinal = testingData[,naData]
set.seed(3141592)
summary(trainingDataFinal)
trainingData1 = createDataPartition(y=trainingDataFinal$classe,p=0.6, list=FALSE)
finalTraining = trainingDataFinal[trainingData1,]
finalTesting = trainingDataFinal[-trainingData1,]
summary(finalTraining)
summary(finalTesting)
View(training)
View(training)
View(training)
View(testing)
---
title: "Prediction Assignment"
author: "Nikhil"
date: "October 27, 2016"
output: html_document
---
### 1. Synopsis
R version used for analysis is "R version 3.3.1 (2016-06-21)". OS used is "x86_64, Windows 10 64 Bit".
### 2. Basic settings
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
echo = TRUE  # Make code always visible
options(scipen = 1)  # Turn off scientific notations for numbers
```
### 3. Loading the libraries and downloading the files
```{r, cache=TRUE}
library(RCurl)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
trainingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile=getURL(trainingURL)
testingFile=getURL(testingURL)
```
###4. Reading the data and doing the preliminary validation
```{r, cache=TRUE}
trainingData <- read.csv(textConnection(trainingFile), na.strings = c("NA", "#DIV/0!", ""))
testingData  <- read.csv(textConnection(testingFile),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(tainingData$user_name, trainingData$classe))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
echo = TRUE  # Make code always visible
options(scipen = 1)  # Turn off scientific notations for numbers
# Chunk 2
library(RCurl)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
trainingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile=getURL(trainingURL)
testingFile=getURL(testingURL)
# Chunk 3
trainingData <- read.csv(textConnection(trainingFile), na.strings = c("NA", "#DIV/0!", ""))
testingData  <- read.csv(textConnection(testingFile),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(trainingData$user_name, trainingData$classe))
prop.table(table(trainingData$classe))
# Chunk 4
trainingDataFinal = trainingData[,7:160]
testingDataFinal = testingData[,7:160]
names (trainingDataFinal)
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19621
naData
trainingDataFinal = trainingData[,naData]
testingDataFinal = testingData[,naData]
set.seed(3141592)
summary(trainingDataFinal)
trainingData1 = createDataPartition(y=trainingDataFinal$classe,p=0.6, list=FALSE)
finalTraining = trainingDataFinal[trainingData1,]
finalTesting = trainingDataFinal[-trainingData1,]
summary(finalTraining)
summary(finalTesting)
trainingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile=getURL(trainingURL)
testingFile=getURL(testingURL)
```
###4. Reading the data and doing the preliminary validation
```{r, cache=TRUE}
trainingData <- read.csv(textConnection(trainingFile), na.strings = c("NA", "#DIV/0!", ""))
testingData  <- read.csv(textConnection(testingFile),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(trainingData$user_name, trainingData$classe))
prop.table(table(trainingData$classe))
```{r, cache=TRUE}
trainingDataFinal = trainingData[,7:160]
testingDataFinal = testingData[,7:160]
names (trainingDataFinal)
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19621
naData
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19622
naData
trainingDataFinal = trainingData[,naData]
testingDataFinal = testingData[,naData]
summary(trainingDataFinal)
trainingData1 = createDataPartition(y=trainingDataFinal$classe,p=0.6, list=FALSE)
summary(trainingDataFinal)
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19621
trainingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile=getURL(trainingURL)
testingFile=getURL(testingURL)
trainingData <- read.csv(textConnection(trainingFile), na.strings = c("NA", "#DIV/0!", ""))
testingData  <- read.csv(textConnection(testingFile),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(trainingData$user_name, trainingData$classe))
prop.table(table(trainingData$classe))
```
###5. Cleaning the data
```{r, cache=TRUE}
trainingDataFinal = trainingData[,7:160]
testingDataFinal = testingData[,7:160]
names (trainingDataFinal)
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19622
naData
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19621
naData
trainingDataFinal = trainingDataFinal[,naData]
testingDataFinal = testingDataFinal[,naData]
summary(trainingDataFinal)
trainingData1 = createDataPartition(y=trainingDataFinal$classe,p=0.6, list=FALSE)
finalTraining = trainingDataFinal[trainingData1,]
finalTesting = trainingDataFinal[-trainingData1,]
summary(finalTraining)
summary(finalTesting)
dim(finalTraining)
dim(finalTesting)
NearZeroVariance_columns=nearZeroVar(finalTraining)
if (length(NearZeroVariance_columns)>0)
{
finalTraining = finalTraining[,-NearZeroVariance_columns]
finalTesting = finalTesting[, -NearZeroVariance_columns]
}
summary (finalTraining)
summary (finalTesting)
str (finalTraining)
str (finalTesting)
rfModel = randomForest(classe~.,data=finalTraining,importance=TRUE, ntree=100)
library(randomForest)
rfModel = randomForest(classe~.,data=finalTraining,importance=TRUE, ntree=100)
varImpPlot(rfModel)
rfModel = randomForest(classe~.,data=finalTraining,importance=TRUE, ntree=100)
varImpPlot(rfModel)
corr = cor(finalTraining[,c("yaw_belt", "roll_belt", "num_window", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "pitch_forearm", "accel_dumbbell_y", "roll_arm", "roll_forearm")])
diag(corr) = 0
which(abs(corr)>0.75,arr.ind = TRUE)
cor(finalTraining$roll_arm, finalTraining$yaw_arm)
cor(finalTraining$roll_belt, finalTraining$yaw_belt)
qplot (roll_belt, magnet_dumbell_y,colour=classe, data=finalTraining)
qplot (roll_belt, magnet_dumbbell_y,colour=classe, data=finalTraining)
fitModel <- rpart(classe~., data=train1, method="class")
fitModel <- rpart(classe~., data=finalTraining, method="class")
fancyRpartPlot(fitModel)
prp(fitModel)
finalModel <- finalTraining(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=finalTraining,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
finalModel = train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=finalTraining,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
echo = TRUE  # Make code always visible
options(scipen = 1)  # Turn off scientific notations for numbers
# Chunk 2
library(RCurl)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
trainingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile=getURL(trainingURL)
testingFile=getURL(testingURL)
# Chunk 3
trainingData <- read.csv(textConnection(trainingFile), na.strings = c("NA", "#DIV/0!", ""))
testingData  <- read.csv(textConnection(testingFile),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(trainingData$user_name, trainingData$classe))
prop.table(table(trainingData$classe))
# Chunk 4
trainingDataFinal = trainingData[,7:160]
testingDataFinal = testingData[,7:160]
names (trainingDataFinal)
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19621
naData
trainingDataFinal = trainingDataFinal[,naData]
testingDataFinal = testingDataFinal[,naData]
summary(trainingDataFinal)
trainingData1 = createDataPartition(y=trainingDataFinal$classe,p=0.6, list=FALSE)
finalTraining = trainingDataFinal[trainingData1,]
finalTesting = trainingDataFinal[-trainingData1,]
dim(finalTraining)
dim(finalTesting)
NearZeroVariance_columns=nearZeroVar(finalTraining)
if (length(NearZeroVariance_columns)>0)
{
finalTraining = finalTraining[,-NearZeroVariance_columns]
finalTesting = finalTesting[, -NearZeroVariance_columns]
}
str (finalTraining)
str (finalTesting)
# Chunk 5
rfModel = randomForest(classe~.,data=finalTraining,importance=TRUE, ntree=100)
varImpPlot(rfModel)
corr = cor(finalTraining[,c("yaw_belt", "roll_belt", "num_window", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "pitch_forearm", "accel_dumbbell_y", "roll_arm", "roll_forearm")])
diag(corr) = 0
which(abs(corr)>0.75,arr.ind = TRUE)
cor(finalTraining$roll_belt, finalTraining$yaw_belt)
qplot (roll_belt, magnet_dumbbell_y,colour=classe, data=finalTraining)
fitModel <- rpart(classe~., data=finalTraining, method="class")
fancyRpartPlot(fitModel)
# Chunk 6
finalModel = train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=finalTraining,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
saveRDS(finalModel, "finalModel.rds")
finalModel=readRDS(finalModel, "finalModel.rds")
cMatrix = confusionMatrix(predict(finalModel, newdata=finalTesting), finalTesting$classe)
cMatrix
install.packages('e1071', dependencies=TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
echo = TRUE  # Make code always visible
options(scipen = 1)  # Turn off scientific notations for numbers
# Chunk 2
library(RCurl)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
trainingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile=getURL(trainingURL)
testingFile=getURL(testingURL)
# Chunk 3
trainingData = read.csv(textConnection(trainingFile), na.strings = c("NA", "#DIV/0!", ""))
testingData  = read.csv(textConnection(testingFile),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(trainingData$user_name, trainingData$classe))
prop.table(table(trainingData$classe))
# Chunk 4
trainingDataFinal = trainingData[,7:160]
testingDataFinal = testingData[,7:160]
names (trainingDataFinal)
naData = apply (!is.na(trainingDataFinal), 2, sum) > 19621
naData
trainingDataFinal = trainingDataFinal[,naData]
testingDataFinal = testingDataFinal[,naData]
summary(trainingDataFinal)
trainingData1 = createDataPartition(y=trainingDataFinal$classe,p=0.6, list=FALSE)
finalTraining = trainingDataFinal[trainingData1,]
finalTesting = trainingDataFinal[-trainingData1,]
dim(finalTraining)
dim(finalTesting)
NearZeroVariance_columns=nearZeroVar(finalTraining)
if (length(NearZeroVariance_columns)>0)
{
finalTraining = finalTraining[,-NearZeroVariance_columns]
finalTesting = finalTesting[, -NearZeroVariance_columns]
}
str (finalTraining)
str (finalTesting)
# Chunk 5
rfModel = randomForest(classe~.,data=finalTraining,importance=TRUE, ntree=100)
varImpPlot(rfModel)
corr = cor(finalTraining[,c("yaw_belt", "roll_belt", "num_window", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "pitch_forearm", "accel_dumbbell_y", "roll_arm", "roll_forearm")])
diag(corr) = 0
which(abs(corr)>0.75,arr.ind = TRUE)
cor(finalTraining$roll_belt, finalTraining$yaw_belt)
qplot (roll_belt, magnet_dumbbell_y,colour=classe, data=finalTraining)
fitModel = rpart(classe~., data=finalTraining, method="class")
fancyRpartPlot(fitModel)
# Chunk 6
finalModel = train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=finalTraining,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
saveRDS(finalModel, "finalModel.rds")
finalModel=readRDS(finalModel, "finalModel.rds")
cMatrix = confusionMatrix(predict(finalModel, newdata=finalTesting), finalTesting$classe)
cMatrix
outliersClass = function(values, predicted)
{
sum(predicted!=values)/length(values)
}
outliersErrRate = outliersClass(finalTesting$classe, predictions)
predictions=predict(finalModel, newdata=finalTesting)
outliersClass = function(values, predicted)
{
sum(predicted!=values)/length(values)
}
outliersErrRate = outliersClass(finalTesting$classe, predictions)
outliersErrRate
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
echo = TRUE  # Make code always visible
options(scipen = 1)  # Turn off scientific notations for numbers
# Chunk 2
library(RCurl)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
# Chunk 3
trainingData = read.csv(textConnection(getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")), na.strings = c("NA", "#DIV/0!", ""))
testingData  = read.csv(textConnection(getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")),  na.strings = c("NA", "#DIV/0!", ""))
str(trainingData)
head(trainingData)
names(trainingData)
summary(trainingData)
summary(testingData)
table(trainingData$classe)
prop.table(table(trainingData$user_name, trainingData$classe))
prop.table(table(trainingData$classe))
# Chunk 4
trainingData = trainingData[,7:160]
testingData = testingData[,7:160]
names (trainingData)
naData = apply (!is.na(trainingData), 2, sum) > 19621
naData
trainingData = trainingData[,naData]
testingData = testingData[,naData]
summary(trainingData)
splitUpRows = createDataPartition(y=trainingData$classe,p=0.6, list=FALSE)
finalTraining = trainingData[splitUpRows,]
finalTesting = trainingData[-splitUpRows,]
dim(finalTraining)
dim(finalTesting)
NearZeroVariance_columns=nearZeroVar(finalTraining)
if (length(NearZeroVariance_columns)>0)
{
finalTraining = finalTraining[,-NearZeroVariance_columns]
finalTesting = finalTesting[, -NearZeroVariance_columns]
}
str (finalTraining)
str (finalTesting)
# Chunk 5
rfModel = randomForest(classe~.,data=finalTraining,importance=TRUE, ntree=100)
varImpPlot(rfModel)
corr = cor(finalTraining[,c("yaw_belt", "roll_belt", "num_window", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "pitch_forearm", "accel_dumbbell_y", "roll_arm", "roll_forearm")])
diag(corr) = 0
which(abs(corr)>0.75,arr.ind = TRUE)
cor(finalTraining$roll_belt, finalTraining$yaw_belt)
qplot (roll_belt, magnet_dumbbell_y,colour=classe, data=finalTraining)
fitModel = rpart(classe~., data=finalTraining, method="class")
fancyRpartPlot(fitModel)
# Chunk 6
finalModel = train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=finalTraining,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
saveRDS(finalModel, "finalModel.rds")
finalModel=readRDS(finalModel, "finalModel.rds")
predictions=predict(finalModel, newdata=finalTesting)
cMatrix = confusionMatrix(predictions, finalTesting$classe)
cMatrix
outliersClass = function(values, predicted)
{
sum(predicted!=values)/length(values)
}
outliersErrRate = outliersClass(finalTesting$classe, predictions)
outliersErrRate
# Chunk 7
predictions = predict(finalModel, newdata=testingData)
testingData$classe = predictions
submit = data.frame(problem_id = testingData$problem_id, classe = predictions)
write.csv(submit, file = "predictions-assignment-submission.csv", row.names = FALSE)
finalAnswers = testing$classe
writeSubmissionFile = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
}
writeSubmissionFile(finalAnswers)
# Chunk 8
