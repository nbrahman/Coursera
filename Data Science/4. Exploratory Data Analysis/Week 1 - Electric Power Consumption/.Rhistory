message ("Inverse matrix cannot be computed for input matrix")
}
}
cacheSolve(y)
## Functions that cache the inverse of a matrix
##
## Usage example:
##
## > source('cachematrix.R')
## > m <- makeCacheMatrix(matrix(c(2, 0, 0, 2), c(2, 2)))
## > cacheSolve(m)
## [,1] [,2]
## [1,]  0.5  0.0
## [2,]  0.0  0.5
## Create a special "matrix", which is a list containing
## a function to
##   - set the value of the matrix
##   - get the value of the matrix
##   - set the value of the inverse matrix
##   - get the value of the inverse matrix
makeCacheMatrix2 <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inv) i <<- inv
getinverse <- function() i
list(
set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
)
}
## Calculate the inverse of the special "matrix" created with the above
## function, reusing cached result if it is available
cacheSolve2 <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
m <- x$get()
i <- solve(m, ...)
x$setinverse(i)
i
}
makeCac(x)
makeCacheMatrix2(x)
makeCacheMatrix2(y)
makeCacheMatrix2(z)
cacheSolve2(x)
cacheSolve2(y)
## Functions that cache the inverse of a matrix
##
## Usage example:
##
## > source('cachematrix.R')
## > m <- makeCacheMatrix(matrix(c(2, 0, 0, 2), c(2, 2)))
## > cacheSolve(m)
## [,1] [,2]
## [1,]  0.5  0.0
## [2,]  0.0  0.5
## Create a special "matrix", which is a list containing
## a function to
##   - set the value of the matrix
##   - get the value of the matrix
##   - set the value of the inverse matrix
##   - get the value of the inverse matrix
makeCacheMatrix2 <- function(x = matrix()) {
# holds the cached value or NULL if nothing is cached
# initially nothing is cached so set it to NULL
cache <- NULL
# store a matrix
setMatrix <- function(newValue) {
x <<- newValue
# since the matrix is assigned a new value, flush the cache
cache <<- NULL
}
# returns the stored matrix
getMatrix <- function() {
x
}
# cache the given argument
cacheInverse <- function(solve) {
cache <<- solve
}
# get the cached value
getInverse <- function() {
cache
}
# return a list. Each named element of the list is a function
list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
}
## Calculate the inverse of the special "matrix" created with the above
## function, reusing cached result if it is available
cacheSolve2 <- function(x, ...) {
# get the cached value
inverse <- y$getInverse()
# if a cached value exists return it
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
# otherwise get the matrix, caclulate the inverse and store it in
# the cache
data <- y$getMatrix()
inverse <- solve(data)
y$cacheInverse(inverse)
# return the inverse
inverse
}
cacheSolve2(y)
## Functions that cache the inverse of a matrix
##
## Usage example:
##
## > source('cachematrix.R')
## > m <- makeCacheMatrix(matrix(c(2, 0, 0, 2), c(2, 2)))
## > cacheSolve(m)
## [,1] [,2]
## [1,]  0.5  0.0
## [2,]  0.0  0.5
## Create a special "matrix", which is a list containing
## a function to
##   - set the value of the matrix
##   - get the value of the matrix
##   - set the value of the inverse matrix
##   - get the value of the inverse matrix
makeCacheMatrix2 <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Calculate the inverse of the special "matrix" created with the above
## function, reusing cached result if it is available
cacheSolve2 <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix2(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve2(my_matrix)
cacheSolve2(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve2(my_matrix)
cacheSolve2(my_matrix)
my_matrix$getInverse()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
## Check if the input matrix 'x' a numeric matrix
if (sum (apply (x, 2, is.numeric))!=0)
{
## process input matrix 'x' depending upon the functionality
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
else
{
## return the error message
message ("The matrix input is either partly or completely not a numeric matrix")
}
}
## cacheSolve function will calculate Inverse of the supplied matrix
## using solve () function and will store it in cache by calling appropriate function
cacheSolve <- function(x)
{
## Check if inverse matrix can be calculated for input matrix 'x'
if (class(try(solve(x),silent=TRUE))=="matrix")
{
## compute & return inverse matrix for input matrix 'x'
m <- x$getInverse()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setInverse(m)
m
}
else
{
## return the error message
message ("Inverse matrix cannot be computed for input matrix")
}
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
class(try(solve(my_matrix)))
my_matrix
my_matrix$get()
my_matrix$getInverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
## Check if the input matrix 'x' a numeric matrix
if (sum (apply (x, 2, is.numeric))!=0)
{
## process input matrix 'x' depending upon the functionality
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
else
{
## return the error message
message ("The matrix input is either partly or completely not a numeric matrix")
}
}
## cacheSolve function will calculate Inverse of the supplied matrix
## using solve () function and will store it in cache by calling appropriate function
cacheSolve <- function(x)
{
## Check if inverse matrix can be calculated for input matrix 'x'
data <- x$get()
if (class(try(solve(data),silent=TRUE))=="matrix")
{
## compute & return inverse matrix for input matrix 'x'
m <- x$getInverse()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
m <- solve(data)
x$setInverse(m)
m
}
else
{
## return the error message
message ("Inverse matrix cannot be computed for input matrix")
}
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
x$get()
x$getInverse()
cacheSolve(x)
cacheSolve(x)
x$getInverse()
y$get()
y$getInverse()
cacheSolve(y)
cacheSolve(y)
y$getInverse()
z$get()
z$getInverse()
cacheSolve(z)
cacheSolve(z)
z$getInverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
## Check if the input matrix 'x' a numeric matrix
if (sum (apply (x, 2, is.numeric))!=0)
{
## process input matrix 'x' depending upon the functionality
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
else
{
## return the error message
message ("The matrix input is either partly or completely not a numeric matrix")
}
}
## cacheSolve function will calculate Inverse of the supplied matrix
## using solve () function and will store it in cache by calling appropriate function
cacheSolve <- function(x, ...)
{
## Check if inverse matrix can be calculated for input matrix 'x'
data <- x$get()
if (class(try(solve(data),silent=TRUE))=="matrix")
{
## compute & return inverse matrix for input matrix 'x'
m <- x$getInverse()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
m <- solve(data)
x$setInverse(m)
m
}
else
{
## return the error message
message ("Inverse matrix cannot be computed for input matrix")
}
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
## Check if the input matrix 'x' a numeric matrix
if (sum (apply (x, 2, is.numeric))!=0)
{
## process input matrix 'x' depending upon the functionality
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
else
{
## return the error message
message ("The matrix input is either partly or completely not a numeric matrix")
}
}
## cacheSolve function will calculate Inverse of the supplied matrix
## using solve () function and will store it in cache by calling appropriate function
cacheSolve <- function(x, ...)
{
## Check if inverse matrix can be calculated for input matrix 'x'
data <- x$get()
if (class(try(solve(data),silent=TRUE))=="matrix")
{
## compute & return inverse matrix for input matrix 'x'
m <- x$getInverse()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
m <- solve(data)
x$setInverse(m)
m
}
else
{
## return the error message
message ("Inverse matrix cannot be computed for input matrix")
}
}
x <- makeCacheMatrix(matrix(rep(1,25),nc=5))
x$get()
x$getInverse()
cacheSolve(x)
cacheSolve(x)
x$getInverse()
y<- makeCacheMatrix(matrix(1+1e-10*rnorm(25),nc=5))
y$get()
y$getInverse()
cacheSolve(y)
cacheSolve(y)
y$getInverse()
y<- makeCacheMatrix(0.001*diag(1,5))
z$get()
z$getInverse()
cacheSolve(z)
cacheSolve(z)
z$getInverse()
x <- makeCacheMatrix(matrix(rep(1,25),nc=5))
x$get()
x$getInverse()
cacheSolve(x)
cacheSolve(x)
x$getInverse()
y<- makeCacheMatrix(matrix(1+1e-10*rnorm(25),nc=5))
y$get()
y$getInverse()
cacheSolve(y)
cacheSolve(y)
y$getInverse()
z<- makeCacheMatrix(0.001*diag(1,5))
z$get()
z$getInverse()
cacheSolve(z)
cacheSolve(z)
z$getInverse()
source("./Plot1.R")
getwd()
setwd("H:\RStudio")
setwd("H:/RStudio")
source("./Plot1.R")
source('H:/RStudio/C4_W1/Plot1.R')
setwd("H:/RStudio/C4_W1")
source("./Plot1.R")
source("./Plot1.R")
source("./Plot1.R")
source("./Plot1.R")
source("./Plot2.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot1.R")
source("./Plot2.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot3.R")
source("./Plot2.R")
source("./Plot1.R")
source("./Plot4.R")
source("./Plot1.R")
source("./Plot2.R")
source("./Plot3.R")
source("./Plot4.R")
par(mfrow=c(1,1))
source("./Plot1.R")
source("./Plot2.R")
source("./Plot3.R")
source("./Plot4.R")
